@startuml

' Clases principales
class AplicacionMovil {
    - Scanner scanner
    - SensorOcupacion sensor
    - BaseDatos baseDatos
    + void iniciarAplicacion(DatosSimulacion datosSimulacion)
    + String registrarMoto()
    + void mostrarMenuOpciones(DatosSimulacion datosSimulacion)
    + void asignarEspacio(List<Estacionamiento> espacios, String placa, ModuloAdministracion admin)
    + void liberarEspacio(String idEspacio, DatosSimulacion datosSimulacion)
}

class BaseDatos {
    - String URL
    - String USER
    - String PASSWORD
    + Connection conectar()
    + void actualizarEstadoEspacio(String idEspacio, boolean ocupado)
    + void registrarMoto(String placa, String idEspacio, Timestamp entrada)
    + ResultSet obtenerEspacios(String query)
    + void registrarHistorial(String placa, String idEspacio, String evento)
    + void limpiarTabla(String tabla)
    + void reiniciarAutoIncrement(String tabla)
}

class DatosSimulacion {
    - List<Estacionamiento> espacios
    - ModuloAdministracion admin
    - BaseDatos baseDatos
    + List<Estacionamiento> getEspacios()
    + ModuloAdministracion getAdmin()
    + void limpiarDatos()
}

abstract class Estacionamiento {
    - String idEspacio
    - boolean ocupado
    + boolean isOcupado()
    + String getIdEspacio()
    + int obtenerTiempoDesdeUltimaLiberacion()
}

class EspacioMoto {
    + void ocuparEspacio()
    + void liberarEspacio()
}

class EstacionamientoMai {
    + static void main(String[] args)
}

class ModuloAdministracion {
    - int espaciosTotales
    - int espaciosOcupados
    - BaseDatos baseDatos
    + void incrementarEspaciosOcupados()
    + void decrementarEspaciosOcupados()
    + void generarReporte()
    + int getEspaciosLibres()
    + void resetearEspacios()
}

class Moto {
    - String placa
    - String espacio
    - Timestamp tiempoEntrada
    + String getPlaca()
    + String getEspacio()
    + Timestamp getTiempoEntrada()
}

class MotoDAO {
    + void guardarMoto(Moto moto)
    + void actualizarEstadoEspacio(String idEspacio, boolean ocupado)
    + void registrarHistorial(String placa, String idEspacio, String evento)
}

class SensorOcupacion {
    + void detectarOcupacion()
    + void detectarLibreracion()
}

interface Sensor {
    + void detectarOcupacion()
    + void detectarLibreracion()
}

class SeñalizacionVisual {
    + void mostrarEstado(Estacionamiento espacio)
    + void mostrarDetalleEstado(Estacionamiento espacio)
    + void mostrarEspaciosDisponibles(List<Estacionamiento> espacios)
}

' Relaciones
AplicacionMovil --> DatosSimulacion : "usa"
AplicacionMovil --> BaseDatos : "usa"
AplicacionMovil --> SensorOcupacion : "usa"
DatosSimulacion --> ModuloAdministracion : "compone"
DatosSimulacion --> BaseDatos : "usa"
DatosSimulacion --> Estacionamiento : "contiene *"
EspacioMoto --|> Estacionamiento : "hereda"
ModuloAdministracion --> BaseDatos : "usa"
ModuloAdministracion --> Estacionamiento : "genera reportes"
MotoDAO --> Moto : "guarda"
SensorOcupacion --|> Sensor : "implementa"
SeñalizacionVisual --> Estacionamiento : "usa"

@enduml
